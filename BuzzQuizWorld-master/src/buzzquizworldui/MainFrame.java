/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package buzzquizworldui;

import buzzquizworld.object.model.Game;
import buzzquizworld.object.model.User;
import buzzquizworld.object.model.enums.SupportedLanguage;
import buzzquizworld.object.model.ui.GameFactory;
import buzzquizworldui.translations.UiTranslator;
import buzzquizworldui.utilities.GameLogger;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Jackie
 */
public class MainFrame extends javax.swing.JFrame {

    private Game game;
    private UiTranslator translator = new UiTranslator();
    private SupportedLanguage language;
    private LanguageSelectionPanel languageSelectionPanel;
    private NewGamePanel newGamePanel;
    private QuestionPanel questionPanel;
    private HistoryPanel historyPanel;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    public void OpenLanguagePanel(){
        if(questionPanel!=null){
            this.remove(questionPanel);
        }
        
        if(newGamePanel!=null){
            this.remove(newGamePanel);
        }
        
        if(languageSelectionPanel!=null){
            this.remove(languageSelectionPanel);
        }
        languageSelectionPanel= new LanguageSelectionPanel(this);
        this.add(languageSelectionPanel);
        this.revalidate();
        this.repaint();
    }

    public void OpenNewGamePanel() throws IllegalArgumentException, IllegalAccessException{
        this.remove(languageSelectionPanel);
        newGamePanel= new NewGamePanel(this);
        this.translator.TranslatePanelElements(newGamePanel, this.language);
        this.add(newGamePanel);
        this.revalidate();
        this.repaint();
    }
    
    public void EndRound() throws IllegalArgumentException, IllegalAccessException, IOException, FileNotFoundException, ClassNotFoundException{
        this.remove(questionPanel);
        User user1 = this.game.getUser1();
        User user2 = this.game.getUser2();
        int roundsRemain = this.game.getRounds()-1;
        
        this.game = GameFactory.SelectRandomGameMode(user2!=null);
        this.game.setUser1(user1);
        this.game.setUser2(user2);
        this.game.setRounds(roundsRemain);
        
        if(roundsRemain <= 0){ //End of the game
            GameLogger.LogGame(user1, user2);
            if(this.game.getUser2()!=null){
                JOptionPane.showMessageDialog(this, this.language==SupportedLanguage.ENGLISH?"End of the game... Winner: "+game.getWinner()+" with points "+game.getWinner().getPoints():"Τέλος παιχνιδιού... Ο νικιτής: "+game.getWinner()+" με "+game.getWinner().getPoints()+" πόντους");    
            } else{
                JOptionPane.showMessageDialog(this, this.language==SupportedLanguage.ENGLISH?"End of the game... Total points: "+game.getUser1().getPoints():"Τέλος παιχνιδιού... Συνολικοί πόντοι: "+game.getUser1().getPoints());    
            }
            
            this.OpenNewGamePanel();
            return;
        }
        this.OpenQuestionPanel();
    }
    
    public void OpenQuestionPanel() throws IllegalArgumentException, IllegalAccessException, IOException{
        this.remove(newGamePanel);
        JOptionPane.showMessageDialog(this, this.language==SupportedLanguage.ENGLISH?game.getGameDescriptionEn():game.getGameDescriptionGr());
        this.setGame(game);
        questionPanel= new QuestionPanel(this);
        this.translator.TranslatePanelElements(questionPanel, this.game.getLanguage());
        this.add(questionPanel);
        this.revalidate();
        this.repaint();
    }

    public Game getGame() {
        return game;
    }

    public void setGame(Game game) {
        this.game = game;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1280, 1024));
        setMinimumSize(new java.awt.Dimension(1280, 1024));
        setPreferredSize(new java.awt.Dimension(1280, 1024));
        setResizable(false);

        jMenu1.setText("Buzz Menu");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("New Game");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("History");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Log");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 902, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            JFrame frame = new JFrame();
            
            historyPanel = new HistoryPanel();
            this.translator.TranslatePanelElements(historyPanel, SupportedLanguage.ENGLISH);
            this.add(historyPanel);
            frame.setVisible(true);
            frame.add(historyPanel);
            frame.setMinimumSize(new Dimension(600,350));
            frame.revalidate();
            frame.repaint();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        OpenLanguagePanel();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    MainFrame frame = new MainFrame();
                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    frame.setResizable(false);
                    frame.setExtendedState( frame.getExtendedState()|JFrame.MAXIMIZED_BOTH );
                    frame.setLayout(new FlowLayout());
                    frame.OpenLanguagePanel();
                    
                    frame.pack();
                    frame.setVisible(true);
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public void setLanguage(SupportedLanguage language) {
        this.language = language;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    // End of variables declaration//GEN-END:variables
}
